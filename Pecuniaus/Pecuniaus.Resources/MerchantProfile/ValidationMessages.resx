<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressReq" xml:space="preserve">
    <value>Address Value Is required</value>
  </data>
  <data name="AffiliationReq" xml:space="preserve">
    <value>Affiliation Number is required</value>
  </data>
  <data name="BusinessStatusReq" xml:space="preserve">
    <value>Business Status is Required</value>
  </data>
  <data name="CellphoneReq" xml:space="preserve">
    <value>Cell Number is Required</value>
  </data>
  <data name="CellphoneVal" xml:space="preserve">
    <value>Cell Number must be Ten digit long</value>
  </data>
  <data name="CityReq" xml:space="preserve">
    <value>City Name is required</value>
  </data>
  <data name="DateBecameOwnerReq" xml:space="preserve">
    <value>Date Became Owner is Required</value>
  </data>
  <data name="DateBecameOwnerVal" xml:space="preserve">
    <value>Date Became Owner should be less than today's date</value>
  </data>
  <data name="DateBusinessStartedCCReq" xml:space="preserve">
    <value>Date the business started accepting CC is Required</value>
  </data>
  <data name="DateBusinessStartedCCVal" xml:space="preserve">
    <value>Date the business started accepting CC should be less than today's date</value>
  </data>
  <data name="DateBusinessStartedReq" xml:space="preserve">
    <value>Date Business Started is Required</value>
  </data>
  <data name="DateBusinessStartedVal" xml:space="preserve">
    <value>Date Business Started should be less than today's date</value>
  </data>
  <data name="DOBReq" xml:space="preserve">
    <value>Date of Birth is Required</value>
  </data>
  <data name="DOBVal" xml:space="preserve">
    <value>Date the Birth should be less than today's date</value>
  </data>
  <data name="EmailReq" xml:space="preserve">
    <value>Email Address is Required</value>
  </data>
  <data name="EmailVal" xml:space="preserve">
    <value>Enter Vaild Email Address</value>
  </data>
  <data name="FaxReq" xml:space="preserve">
    <value>Fax number is required</value>
  </data>
  <data name="FaxVal" xml:space="preserve">
    <value>Cell Number must be Ten digit long</value>
  </data>
  <data name="FirstNameReq" xml:space="preserve">
    <value>First Name is Required</value>
  </data>
  <data name="FromDateVal" xml:space="preserve">
    <value>From Date should be less than today's date</value>
  </data>
  <data name="IdentificationReq" xml:space="preserve">
    <value>Identification is Required</value>
  </data>
  <data name="LandlordCompanyNameReq" xml:space="preserve">
    <value>Landlord Company Name is Required</value>
  </data>
  <data name="LandlordNameReq" xml:space="preserve">
    <value>Landlord Name is Required</value>
  </data>
  <data name="LastNameReq" xml:space="preserve">
    <value>Last Name is Required</value>
  </data>
  <data name="MonthlyRentAmountGreaterThanZero" xml:space="preserve">
    <value>Monthly Rent Amount should be greater than zero</value>
  </data>
  <data name="MonthlyRentAmountReq" xml:space="preserve">
    <value>Monthly Rent Amount is Required</value>
  </data>
  <data name="NameofBusinessReq" xml:space="preserve">
    <value>Name of Business is Required</value>
  </data>
  <data name="NameofCompanyReq" xml:space="preserve">
    <value>Name of Company is Required</value>
  </data>
  <data name="PositionReq" xml:space="preserve">
    <value>Position is Required</value>
  </data>
  <data name="ProvinceReq" xml:space="preserve">
    <value>Province information is required</value>
  </data>
  <data name="RetentionChangeReasonReq" xml:space="preserve">
    <value>Retention Change Reason is Required</value>
  </data>
  <data name="RetentionPercentageReq" xml:space="preserve">
    <value>Retention Percentage is Required</value>
  </data>
  <data name="RNCReq" xml:space="preserve">
    <value>RNC Number is Required</value>
  </data>
  <data name="RNCVal" xml:space="preserve">
    <value>RNC Number must be Elevent digit long</value>
  </data>
  <data name="Telephone1Req" xml:space="preserve">
    <value>Phone Number 1 is required</value>
  </data>
  <data name="Telephone1Val" xml:space="preserve">
    <value>Phone Number 1 must be Ten digit long</value>
  </data>
  <data name="Telephone2Req" xml:space="preserve">
    <value>Phone Number 2 is required</value>
  </data>
  <data name="Telephone2Val" xml:space="preserve">
    <value>Phone Number 2 must be Ten digit long</value>
  </data>
  <data name="ToDateReq" xml:space="preserve">
    <value>To Date is Required</value>
  </data>
  <data name="ToDateVal" xml:space="preserve">
    <value>To Date should be less than From Date</value>
  </data>
  <data name="FromDateReq" xml:space="preserve">
    <value>From Date is Required</value>
  </data>
</root>